#Median_Clustering >> Change Path and Length(4,5,6)

import random
import numpy as np
random.seed(42)
np.random.seed(42)

import pandas as pd
import numpy as np
df_0 = pd.read_csv('/home/vickey-vikkrant/Desktop/Heartfailure/heart_failure_clinical_records_dataset.csv')

n=6

#############Preprocessing#########
df_0

df_0 = df_0.drop('DEATH_EVENT', axis=1)
df_0 = df_0.drop('time', axis=1)

# Assuming df_0 is the original DataFrame
df_1 = (df_0 * 10).astype(int)  # Multiply df_0 by 10 and convert to integer

# Perform transformations on specific columns
df_1['platelets'] = (df_1['platelets'] / 10000).astype(int)
df_1['creatinine_phosphokinase'] = (df_1['creatinine_phosphokinase'] / 100).astype(int)
df_1['age'] = (df_1['age'] / 10).astype(int)
df_1['ejection_fraction'] = (df_1['ejection_fraction'] / 10).astype(int)
df_1['serum_sodium'] = (df_1['serum_sodium'] / 100).astype(int)

# Display the resulting DataFrame
df_1

list_of_lists = df_1.values.tolist()  # Converts DataFrame to list of lists
#print(list_of_lists)

def godel_encoding(list_of_lists):
    import sympy

    # Generate enough prime numbers dynamically
    max_length = max(len(ele) for ele in list_of_lists)
    primes = list(sympy.primerange(2, sympy.prime(max_length + 1)))

    godel_numbers = []  # To store results for each list

    for ele in list_of_lists:
        result = 1
        for i, value in enumerate(ele):
            result *= primes[i] ** int(value)
        godel_numbers.append(result)
        #print(result)  # Print each Gödel number

    return godel_numbers  # Return all Gödel numbers

godel_numbers = godel_encoding(list_of_lists)
#print("Gödel Numbers:", godel_numbers)

max_length = max(len(str(num)) for num in godel_numbers)
# Find the next multiple of n for the maximum length
padded_length = ((max_length + n - 1) // n) * n  # Round up to the nearest multiple of n
# Format each Gödel number to the padded length with leading zeros
godel_numbers = [str(num).zfill(padded_length) for num in godel_numbers]

godel_numbers

def split_string(encodings, div):
    r_ind=[]
    enc_length = len(encodings[0])
    # div = math.floor((enc_length)/split)+1
    for i in range(div, enc_length, div):
      r_ind.append(i)
    iclust=[]
    for i in range(len(encodings)):
      s=0
      for j in r_ind:
        iclust.append(encodings[i][s:j])
        s=j
      iclust.append(encodings[i][s:])
      encodings[i]=iclust
      iclust=[]
    return encodings, len(r_ind)+1

import copy
enc = copy.deepcopy(godel_numbers)
split_size = n

# for ele in enc:
#   print(ele)
# print("Encoded:",enc)
split_enc, num_of_splits = split_string(enc,split_size)
#print("Split_encoded",split_enc)

def nullbound(n1,winsize,PS,Rule):
  #  print("PS",PS)
   NS = [0] * n1
   NS[0]=Rule[int(PS[0])*10+int(PS[1])]
   for i in range(1, n1-1):
    NS[i]=Rule[int(PS[i-1])*100+int(PS[i])*10+int(PS[i+1])]
   NS[n1-1]=Rule[int(PS[n1-2])*100+int(PS[n1-1])*10]
  #  print("NS",NS)
   return NS

winsize=3
def apply_rule(split,rule):
    final_array = []
    #print("Split",split)
    split_list=list(set(split))
    #split_list.sort(reverse=True)
    split_len=len(split_list[0])
    #print("Split list",split_list)
    # print("Split len",split_len)
    current_array=[]
    split_list1=[]
    for ele in split_list:
      ele=list(ele)
      split_list1.append(ele)
    split_list=split_list1
    #print("Split list",split_list)

    while(split_list):
      curr_element=split_list[0]
      #curr_element=list(curr_element)
      #print("Current element",curr_element)
      flag=0
      while(not flag):
        if current_array == []:
          current_element1=[]
          for c in curr_element:
            current_element1.append(int(c))
          current_array.append(current_element1)

          #current_array.append(curr_element)
          #print("Current array",current_array)
          split_list.remove(curr_element)
        else:
          next_element=nullbound(split_len,winsize,curr_element,rule)
          #print("Next element",next_element)

          if (next_element not in current_array):
            #print("Next element no in cycle")
            #print("Split:",split_list)
            next_element1 = [str(x) for x in next_element]
            if next_element1 in split_list:
                #print("next element in dataset")
                split_list.remove(next_element1)
                current_array.append(next_element)
            curr_element=next_element
                #print("Current element",curr_element)
          else:
              # print("last Current element",curr_element)
              flag=1
              #current_array.append(curr_element)
      final_array.append(current_array)
      #print("cycle",current_array)
      current_array=[]
    return final_array

def Stage1(rule1,rule2,rule3,enc_stage1,split):
  fc = {}
  tr = []
  #print("\ninput to stage 1",enc_stage1)
  #***********************applying rule to each split********************

  for i in range(split):
    for j in range(len(enc_stage1)):
      tr.append(enc_stage1[j][i])
    #print("split_data",tr)
    fc[i]=apply_rule(tr,rule1)
    tr = []
  return fc

def rg(p,d=10):
    left = 1
    right = 1
    m = left + right + 1
    # n = cell_length  # Number of cells

    # Parse the parameters from the input string
    words = p.split(",")
    param = [int(word.strip()) for word in words]

    # Generate the rule from the parameters
    Rule = []
    for x in range(d):
        for y in range(d):
            for z in range(d):
                rule = (param[0] * x * y * z + param[1] * x * y + param[2] * x * z +
                        param[3] * z * y + param[4] * x + param[5] * y + param[6] * z + param[7]) % d
                Rule.append(rule)
    #print("\nRule:",Rule)
    return Rule

def cy_enc(l, index):
    # Determine the number of digits in l
    length = len(str(l))
    # Format the index with leading zeros based on the length
    return f"{index:0{length}d}"

def Stage_part2(R1,R2,R3,dataset2):
  print("Rule 3 Used")
  with open('/home/vickey-vikkrant/Desktop/Heartfailure/HF_Median l6.txt', 'a') as file:
        file.write(f"Rule3  used     ")
        file.close()
  #print(dataset2)
  split_size=n
  max_len = max(len(s) for s in dataset2)  # Find the maximum string length
  target_len = ((max_len + n - 1) // n) * n
  dataset2_n=[s.zfill(target_len) for s in dataset2]
  #encodings = [str(e) for e in encodings]
  split_enc2, num_of_splits2 = split_string(dataset2_n,split_size)
  #print(split_enc2)
  Stage2_part2_output1=Stage1(R1,R2,R3,split_enc2,num_of_splits2)
  stage2_output2=[]
  stage2_output2=Stage2(R1,R2,R3,Stage2_part2_output1,dataset2_n)
  return stage2_output2

def custom_sort_by_median(cluster):
    def compute_median(lst):
        # Convert to integers
        lst = list(map(int, lst))
        # Sort manually (no built-in functions)
        for i in range(len(lst)):
            for j in range(len(lst) - i - 1):
                if lst[j] > lst[j + 1]:
                    lst[j], lst[j + 1] = lst[j + 1], lst[j]
        # Find the median
        n = len(lst)
        if n % 2 == 1:
            return lst[n // 2]
        else:
            return (lst[n // 2 - 1] + lst[n // 2]) / 2

    # Custom Bubble Sort on Cluster based on Median
    n = len(cluster)
    for i in range(n):
        for j in range(0, n - i - 1):
            median1 = compute_median(cluster[j])
            median2 = compute_median(cluster[j + 1])
            if median1 > median2 or (median1 == median2 and cluster[j] > cluster[j + 1]):
                # Swap if the first is greater or if they are equal but out of order
                cluster[j], cluster[j + 1] = cluster[j + 1], cluster[j]
    return cluster

# # Example Usage
# icluster_Med_sort = [
#     ["3", "4", "5"],  # Median: 4
#     ["2", "4", "6"],  # Median: 4
#     ["1", "2", "3"],  # Median: 2
#     ["4", "4", "4"],  # Median: 4
# ]

# sorted_cluster = custom_sort_by_median(icluster_Med_sort)
# print(sorted_cluster)

def Stage2(R1,R2,R3,cluster1,dataset1):
  #print("input to stage2 dataset",dataset1)

  #***************Sorting the cluster based on median**********************

  for i in range(len(cluster1)):
    #icluster_Med_sort=Median_Cycles(cluster1[i])
    import statistics
    cluster1[i] = [[''.join(map(str, item)) for item in sublist] for sublist in cluster1[i]]

    #print("\nclusters or cycles of split:",i,cluster1[i])
    # Example list of lists
    #list_of_lists = [[3, 1, 4], [1, 5, 9, 2], [6, 5], [8, 3, 2, 7]]

    # Sort based on the median of each sublist
    #icluster_Med_sort = sorted(cluster1[i], key=lambda sublist: statistics.median(map(int, sublist)))
    icluster_Med_sort = custom_sort_by_median(cluster1[i])

    #print(sorted_list)
    iclust=copy.deepcopy(icluster_Med_sort)
    s=len(iclust)
    #print("sorted clusters",iclust)
    #print("length of clusters",s)
    #*****************changing the datset elements with cluster number****************
    #print("Dataset before change",dataset1)
    #print(iclust)
    for j in range(len(dataset1)):
      plt=dataset1[j][i]
      l=0
      while(plt not in iclust[l]):
        l+=1
      #print("find in cycle",l,plt)
      dataset1[j][i]= cy_enc(s,l)
    #print("Dataset After change in split",dataset1)



  #************************************merging all split into one****************
  for i in range(len(dataset1)):
    iclust=""
    for j in dataset1[i]:
      iclust+=j
    dataset1[i]=iclust
  enc_data=[]
  init_clusters=[]
  #print("\nDataset after merging splits",dataset1)
  #If merged data length less than maximum possible cell size  apply rule 2
  if(len(dataset1[0])<=8):
    init_clusters=apply_rule(dataset1,R2)
    #print("\nclusters after applying rule ",init_clusters)
    #data = [[[1, 0, 1, 9], [0, 2, 5, 0], [3, 2, 6, 3]], [[4, 9, 8, 8], [6, 2, 5, 1]]]

    result = []
    for sublist in init_clusters:
        sub_result = [''.join(map(str, lst)) for lst in sublist]
        result.append(sub_result)

    #print(result)
    init_clusters=result.copy()
    #print("\nclusters after applying next rule ",init_clusters)
    import statistics
    # init_cluster_Med_sort=  sorted(init_clusters, key=lambda sublist: statistics.median(map(int, sublist)))
    init_cluster_Med_sort = custom_sort_by_median(init_clusters)
    # init_cluster_Med_sort=Median_Cycles(init_clusters)
    #print("clusters after after sort ",init_cluster_Med_sort)
    enc_data=copy.deepcopy(dataset1)
    #print("Dataset",dataset1)
    for i in range(len(dataset1)):
      j=0
      while j <len(init_cluster_Med_sort):
        if dataset1[i] in init_cluster_Med_sort[j]:
          dataset1[i]=j
          break
        else:
          j+=1
  else:
    Stage2_output_reduced=Stage_part2(R1,R2,R3,dataset1)
    return Stage2_output_reduced
  Stage2_output=[]
  Stage2_output.append(dataset1)
  Stage2_output.append(init_cluster_Med_sort)
  return Stage2_output



import statistics
import copy
def Stage3(ST3_in,cycle_3,num_clust):
  #Find decimal values of cluster for sorting
  if(len(cycle_3)<num_clust):
    return
  #data = [['0728', '8257'], ['9412', '6261', '5184']]

  Dec_CL = [[int(x) for x in sublist] for sublist in cycle_3]

  #print("\ncycles in stage3",Dec_CL)
  # Dec_CL=[]
  # for ele in cycle_3:
  #   L1=[]
  #   for e in ele:
  #     L1.append(binaryTodecimal(int(e)))
  #   Dec_CL.append(L1)
  Median_CL=[]
  for ele in Dec_CL:
    Median_CL.append((statistics.median(ele)))
  Unsorted_median=copy.deepcopy(Median_CL)
  #print("Median of cycles", Median_CL)
  Median_CL.sort()
  gap=[]
  flag_index=[]  #for handlinglin same gap ex:- gap 5 at index 20 and 5 at 21
  for i in range(len(Median_CL)-1):
     gap.append(Median_CL[i+1]-Median_CL[i])
  unsortgap=copy.deepcopy(gap)
  gap.sort(reverse=True)
  gap_index=[]
  for i in range(num_clust-1):
    #print("Hello:",i)
    if((unsortgap.index(gap[i])not in flag_index)):
      gap_index.append(unsortgap.index(gap[i]))
      flag_index.append(unsortgap.index(gap[i]))
      unsortgap[unsortgap.index(gap[i])]=1000000
  gap_index.sort()
  flag=[]
  #print(ST3_in)
  #print(unsortgap)
  #print(gap)
  #print(gap_index)
  for i in range(len(gap_index)+1):
    if(i==0):
      for j in range(len(ST3_in)):
        if((ST3_in[j]<=gap_index[i]) and (j not in flag)):
          ST3_in[j]=i
          flag.append(j)
    elif(i>0 and i<(len(gap_index))):
      for j in range(len(ST3_in)):
        if((gap_index[i-1]< ST3_in[j] <= gap_index[i]) and (j not in flag)):
          ST3_in[j]=i
          flag.append(j)
    elif(i==(len(gap_index))):
      for j in range(len(ST3_in)):
        if((gap_index[i-1]<=ST3_in[j]) and (j not in flag)):
          ST3_in[j]=i
          flag.append(j)
  #print(ST3_in)
  return(ST3_in)

from itertools import combinations, permutations
from sklearn.metrics import silhouette_score
from sklearn.metrics import davies_bouldin_score
from sklearn.metrics import calinski_harabasz_score
import copy
def cellular_automata_clustering(rule_list, split, encoding,n):
  rules_comb = list(combinations(rule_list, 2))
  #print("Splitted dataset:",encoding)
  #print(rules_comb)
  import random
  #R=random.choice(rules_comb)
  #print(R1)
  enc1 = copy.deepcopy(encoding)
  #rule1=rg(R[0])
  #rule2=rg(R[1])
  R=[]
  R.append(random.choice(rule_list))
  #R.append('0,0,0,0,4,1,5,7')
  rule1=rg(R[0])
  R.append(random.choice(rule_list))
  #R.append('0,0,0,0,0,9,5,5')

  rule2=rg(R[1])

  random_rule = random.choice(rule_list)

  #random_rule='0,0,0,0,3,9,0,0'
  rule3=rg(random_rule)
  # import random
  #random_rule = random.choice(rule_list)
  # rule3=rg(random_rule)
  fc = Stage1(rule1,rule2,rule3,enc1,split)
  # for index, (key, value) in enumerate(fc.items()):
  #   print(f"Split {index}: Key = {key}, Cycles = {value}")
  # # import random


  # random_rule = random.choice(rule_list)


  # rule2=rg(random_rule)
  # rule2=rg(R[1])
  # import random
  # random_rule = random.choice(rule_list)
  # rule3=rg(random_rule)
  #R3=rg(int(rule3),window_size)
  stage2_output=[]
  stage2_output=Stage2(rule1,rule2,rule3,fc,enc1)
  stage2_dataset=stage2_output[0]
  stage2_cycles=stage2_output[1]
  #print("stage2_dataset",stage2_dataset)
  #print("stage2_cycles",stage2_cycles)

  num_clusters=2
  enc_data_=Stage3(stage2_dataset,stage2_cycles,num_clusters)
  #print("Final labels:",enc_data_)
  X=df_1.to_numpy()
  #print("Rule1:",R1,"Rule2:",random_rule)

  try :
    CA_sill_new=silhouette_score(X,enc_data_,metric="euclidean")
    # print("davies:CA",davies_bouldin_score(X,enc_data_))
    # print("calinski:CA",calinski_harabasz_score(X,enc_data_))
    print("Rule1:",R[0],"Rule2:",R[1],"Rule3:",random_rule,"\tsilhouette:CA",silhouette_score(X,enc_data_,metric="euclidean"),"\tdavies:CA",davies_bouldin_score(X,enc_data_),"\tcalinski:CA",calinski_harabasz_score(X,enc_data_))
    silhouette = silhouette_score(X, enc_data_, metric="euclidean")
    davies = davies_bouldin_score(X, enc_data_)
    calinski = calinski_harabasz_score(X, enc_data_)
    with open('/home/vickey-vikkrant/Desktop/Heartfailure/HF_Median l6.txt', 'a') as file:
      file.write(f"Rule1: {R[0]}, Rule2: {R[1]}, Rule3: {random_rule}\tsilhouette: {silhouette}\tdavies: {davies}\tcalinski: {calinski}\n")
  except:
    CA_sill_new = 0

rule_list=['0,0,0,0,0,1,0,0',
'0,0,0,0,0,1,0,1',
'0,0,0,0,0,1,0,2',
'0,0,0,0,0,1,0,3',
'0,0,0,0,0,1,0,4',
'0,0,0,0,0,1,0,5',
'0,0,0,0,0,1,0,6',
'0,0,0,0,0,1,0,7',
'0,0,0,0,0,1,0,8',
'0,0,0,0,0,1,0,9',
'0,0,0,0,0,1,1,0',
'0,0,0,0,0,1,1,1',
'0,0,0,0,0,1,1,2',
'0,0,0,0,0,1,1,3',
'0,0,0,0,0,1,1,4',
'0,0,0,0,0,1,1,5',
'0,0,0,0,0,1,1,6',
'0,0,0,0,0,1,1,7',
'0,0,0,0,0,1,1,8',
'0,0,0,0,0,1,1,9',
'0,0,0,0,0,1,2,0',
'0,0,0,0,0,1,2,1',
'0,0,0,0,0,1,2,2',
'0,0,0,0,0,1,2,3',
'0,0,0,0,0,1,2,4',
'0,0,0,0,0,1,2,5',
'0,0,0,0,0,1,2,6',
'0,0,0,0,0,1,2,7',
'0,0,0,0,0,1,2,8',
'0,0,0,0,0,1,2,9',
'0,0,0,0,0,1,3,0',
'0,0,0,0,0,1,3,1',
'0,0,0,0,0,1,3,2',
'0,0,0,0,0,1,3,3',
'0,0,0,0,0,1,3,4',
'0,0,0,0,0,1,3,5',
'0,0,0,0,0,1,3,6',
'0,0,0,0,0,1,3,7',
'0,0,0,0,0,1,3,8',
'0,0,0,0,0,1,3,9',
'0,0,0,0,0,1,4,0',
'0,0,0,0,0,1,4,1',
'0,0,0,0,0,1,4,2',
'0,0,0,0,0,1,4,3',
'0,0,0,0,0,1,4,4',
'0,0,0,0,0,1,4,5',
'0,0,0,0,0,1,4,6',
'0,0,0,0,0,1,4,7',
'0,0,0,0,0,1,4,8',
'0,0,0,0,0,1,4,9',
'0,0,0,0,0,1,5,0',
'0,0,0,0,0,1,5,1',
'0,0,0,0,0,1,5,2',
'0,0,0,0,0,1,5,3',
'0,0,0,0,0,1,5,4',
'0,0,0,0,0,1,5,5',
'0,0,0,0,0,1,5,6',
'0,0,0,0,0,1,5,7',
'0,0,0,0,0,1,5,8',
'0,0,0,0,0,1,5,9',
'0,0,0,0,0,1,6,0',
'0,0,0,0,0,1,6,1',
'0,0,0,0,0,1,6,2',
'0,0,0,0,0,1,6,3',
'0,0,0,0,0,1,6,4',
'0,0,0,0,0,1,6,5',
'0,0,0,0,0,1,6,6',
'0,0,0,0,0,1,6,7',
'0,0,0,0,0,1,6,8',
'0,0,0,0,0,1,6,9',
'0,0,0,0,0,1,7,0',
'0,0,0,0,0,1,7,1',
'0,0,0,0,0,1,7,2',
'0,0,0,0,0,1,7,3',
'0,0,0,0,0,1,7,4',
'0,0,0,0,0,1,7,5',
'0,0,0,0,0,1,7,6',
'0,0,0,0,0,1,7,7',
'0,0,0,0,0,1,7,8',
'0,0,0,0,0,1,7,9',
'0,0,0,0,0,1,8,0',
'0,0,0,0,0,1,8,1',
'0,0,0,0,0,1,8,2',
'0,0,0,0,0,1,8,3',
'0,0,0,0,0,1,8,4',
'0,0,0,0,0,1,8,5',
'0,0,0,0,0,1,8,6',
'0,0,0,0,0,1,8,7',
'0,0,0,0,0,1,8,8',
'0,0,0,0,0,1,8,9',
'0,0,0,0,0,1,9,0',
'0,0,0,0,0,1,9,1',
'0,0,0,0,0,1,9,2',
'0,0,0,0,0,1,9,3',
'0,0,0,0,0,1,9,4',
'0,0,0,0,0,1,9,5',
'0,0,0,0,0,1,9,6',
'0,0,0,0,0,1,9,7',
'0,0,0,0,0,1,9,8',
'0,0,0,0,0,1,9,9',
'0,0,0,0,0,3,0,0',
'0,0,0,0,0,3,0,1',
'0,0,0,0,0,3,0,2',
'0,0,0,0,0,3,0,3',
'0,0,0,0,0,3,0,4',
'0,0,0,0,0,3,0,5',
'0,0,0,0,0,3,0,6',
'0,0,0,0,0,3,0,7',
'0,0,0,0,0,3,0,8',
'0,0,0,0,0,3,0,9',
'0,0,0,0,0,3,1,0',
'0,0,0,0,0,3,1,1',
'0,0,0,0,0,3,1,2',
'0,0,0,0,0,3,1,3',
'0,0,0,0,0,3,1,4',
'0,0,0,0,0,3,1,5',
'0,0,0,0,0,3,1,6',
'0,0,0,0,0,3,1,7',
'0,0,0,0,0,3,1,8',
'0,0,0,0,0,3,1,9',
'0,0,0,0,0,3,2,0',
'0,0,0,0,0,3,2,1',
'0,0,0,0,0,3,2,2',
'0,0,0,0,0,3,2,3',
'0,0,0,0,0,3,2,4',
'0,0,0,0,0,3,2,5',
'0,0,0,0,0,3,2,6',
'0,0,0,0,0,3,2,7',
'0,0,0,0,0,3,2,8',
'0,0,0,0,0,3,2,9',
'0,0,0,0,0,3,3,0',
'0,0,0,0,0,3,3,1',
'0,0,0,0,0,3,3,2',
'0,0,0,0,0,3,3,3',
'0,0,0,0,0,3,3,4',
'0,0,0,0,0,3,3,5',
'0,0,0,0,0,3,3,6',
'0,0,0,0,0,3,3,7',
'0,0,0,0,0,3,3,8',
'0,0,0,0,0,3,3,9',
'0,0,0,0,0,3,4,0',
'0,0,0,0,0,3,4,1',
'0,0,0,0,0,3,4,2',
'0,0,0,0,0,3,4,3',
'0,0,0,0,0,3,4,4',
'0,0,0,0,0,3,4,5',
'0,0,0,0,0,3,4,6',
'0,0,0,0,0,3,4,7',
'0,0,0,0,0,3,4,8',
'0,0,0,0,0,3,4,9',
'0,0,0,0,0,3,5,0',
'0,0,0,0,0,3,5,1',
'0,0,0,0,0,3,5,2',
'0,0,0,0,0,3,5,3',
'0,0,0,0,0,3,5,4',
'0,0,0,0,0,3,5,5',
'0,0,0,0,0,3,5,6',
'0,0,0,0,0,3,5,7',
'0,0,0,0,0,3,5,8',
'0,0,0,0,0,3,5,9',
'0,0,0,0,0,3,6,0',
'0,0,0,0,0,3,6,1',
'0,0,0,0,0,3,6,2',
'0,0,0,0,0,3,6,3',
'0,0,0,0,0,3,6,4',
'0,0,0,0,0,3,6,5',
'0,0,0,0,0,3,6,6',
'0,0,0,0,0,3,6,7',
'0,0,0,0,0,3,6,8',
'0,0,0,0,0,3,6,9',
'0,0,0,0,0,3,7,0',
'0,0,0,0,0,3,7,1',
'0,0,0,0,0,3,7,2',
'0,0,0,0,0,3,7,3',
'0,0,0,0,0,3,7,4',
'0,0,0,0,0,3,7,5',
'0,0,0,0,0,3,7,6',
'0,0,0,0,0,3,7,7',
'0,0,0,0,0,3,7,8',
'0,0,0,0,0,3,7,9',
'0,0,0,0,0,3,8,0',
'0,0,0,0,0,3,8,1',
'0,0,0,0,0,3,8,2',
'0,0,0,0,0,3,8,3',
'0,0,0,0,0,3,8,4',
'0,0,0,0,0,3,8,5',
'0,0,0,0,0,3,8,6',
'0,0,0,0,0,3,8,7',
'0,0,0,0,0,3,8,8',
'0,0,0,0,0,3,8,9',
'0,0,0,0,0,3,9,0',
'0,0,0,0,0,3,9,1',
'0,0,0,0,0,3,9,2',
'0,0,0,0,0,3,9,3',
'0,0,0,0,0,3,9,4',
'0,0,0,0,0,3,9,5',
'0,0,0,0,0,3,9,6',
'0,0,0,0,0,3,9,7',
'0,0,0,0,0,3,9,8',
'0,0,0,0,0,3,9,9',
'0,0,0,0,0,7,0,0',
'0,0,0,0,0,7,0,1',
'0,0,0,0,0,7,0,2',
'0,0,0,0,0,7,0,3',
'0,0,0,0,0,7,0,4',
'0,0,0,0,0,7,0,5',
'0,0,0,0,0,7,0,6',
'0,0,0,0,0,7,0,7',
'0,0,0,0,0,7,0,8',
'0,0,0,0,0,7,0,9',
'0,0,0,0,0,7,1,0',
'0,0,0,0,0,7,1,1',
'0,0,0,0,0,7,1,2',
'0,0,0,0,0,7,1,3',
'0,0,0,0,0,7,1,4',
'0,0,0,0,0,7,1,5',
'0,0,0,0,0,7,1,6',
'0,0,0,0,0,7,1,7',
'0,0,0,0,0,7,1,8',
'0,0,0,0,0,7,1,9',
'0,0,0,0,0,7,2,0',
'0,0,0,0,0,7,2,1',
'0,0,0,0,0,7,2,2',
'0,0,0,0,0,7,2,3',
'0,0,0,0,0,7,2,4',
'0,0,0,0,0,7,2,5',
'0,0,0,0,0,7,2,6',
'0,0,0,0,0,7,2,7',
'0,0,0,0,0,7,2,8',
'0,0,0,0,0,7,2,9',
'0,0,0,0,0,7,3,0',
'0,0,0,0,0,7,3,1',
'0,0,0,0,0,7,3,2',
'0,0,0,0,0,7,3,3',
'0,0,0,0,0,7,3,4',
'0,0,0,0,0,7,3,5',
'0,0,0,0,0,7,3,6',
'0,0,0,0,0,7,3,7',
'0,0,0,0,0,7,3,8',
'0,0,0,0,0,7,3,9',
'0,0,0,0,0,7,4,0',
'0,0,0,0,0,7,4,1',
'0,0,0,0,0,7,4,2',
'0,0,0,0,0,7,4,3',
'0,0,0,0,0,7,4,4',
'0,0,0,0,0,7,4,5',
'0,0,0,0,0,7,4,6',
'0,0,0,0,0,7,4,7',
'0,0,0,0,0,7,4,8',
'0,0,0,0,0,7,4,9',
'0,0,0,0,0,7,5,0',
'0,0,0,0,0,7,5,1',
'0,0,0,0,0,7,5,2',
'0,0,0,0,0,7,5,3',
'0,0,0,0,0,7,5,4',
'0,0,0,0,0,7,5,5',
'0,0,0,0,0,7,5,6',
'0,0,0,0,0,7,5,7',
'0,0,0,0,0,7,5,8',
'0,0,0,0,0,7,5,9',
'0,0,0,0,0,7,6,0',
'0,0,0,0,0,7,6,1',
'0,0,0,0,0,7,6,2',
'0,0,0,0,0,7,6,3',
'0,0,0,0,0,7,6,4',
'0,0,0,0,0,7,6,5',
'0,0,0,0,0,7,6,6',
'0,0,0,0,0,7,6,7',
'0,0,0,0,0,7,6,8',
'0,0,0,0,0,7,6,9',
'0,0,0,0,0,7,7,0',
'0,0,0,0,0,7,7,1',
'0,0,0,0,0,7,7,2',
'0,0,0,0,0,7,7,3',
'0,0,0,0,0,7,7,4',
'0,0,0,0,0,7,7,5',
'0,0,0,0,0,7,7,6',
'0,0,0,0,0,7,7,7',
'0,0,0,0,0,7,7,8',
'0,0,0,0,0,7,7,9',
'0,0,0,0,0,7,8,0',
'0,0,0,0,0,7,8,1',
'0,0,0,0,0,7,8,2',
'0,0,0,0,0,7,8,3',
'0,0,0,0,0,7,8,4',
'0,0,0,0,0,7,8,5',
'0,0,0,0,0,7,8,6',
'0,0,0,0,0,7,8,7',
'0,0,0,0,0,7,8,8',
'0,0,0,0,0,7,8,9',
'0,0,0,0,0,7,9,0',
'0,0,0,0,0,7,9,1',
'0,0,0,0,0,7,9,2',
'0,0,0,0,0,7,9,3',
'0,0,0,0,0,7,9,4',
'0,0,0,0,0,7,9,5',
'0,0,0,0,0,7,9,6',
'0,0,0,0,0,7,9,7',
'0,0,0,0,0,7,9,8',
'0,0,0,0,0,7,9,9',
'0,0,0,0,0,9,0,0',
'0,0,0,0,0,9,0,1',
'0,0,0,0,0,9,0,2',
'0,0,0,0,0,9,0,3',
'0,0,0,0,0,9,0,4',
'0,0,0,0,0,9,0,5',
'0,0,0,0,0,9,0,6',
'0,0,0,0,0,9,0,7',
'0,0,0,0,0,9,0,8',
'0,0,0,0,0,9,0,9',
'0,0,0,0,0,9,1,0',
'0,0,0,0,0,9,1,1',
'0,0,0,0,0,9,1,2',
'0,0,0,0,0,9,1,3',
'0,0,0,0,0,9,1,4',
'0,0,0,0,0,9,1,5',
'0,0,0,0,0,9,1,6',
'0,0,0,0,0,9,1,7',
'0,0,0,0,0,9,1,8',
'0,0,0,0,0,9,1,9',
'0,0,0,0,0,9,2,0',
'0,0,0,0,0,9,2,1',
'0,0,0,0,0,9,2,2',
'0,0,0,0,0,9,2,3',
'0,0,0,0,0,9,2,4',
'0,0,0,0,0,9,2,5',
'0,0,0,0,0,9,2,6',
'0,0,0,0,0,9,2,7',
'0,0,0,0,0,9,2,8',
'0,0,0,0,0,9,2,9',
'0,0,0,0,0,9,3,0',
'0,0,0,0,0,9,3,1',
'0,0,0,0,0,9,3,2',
'0,0,0,0,0,9,3,3',
'0,0,0,0,0,9,3,4',
'0,0,0,0,0,9,3,5',
'0,0,0,0,0,9,3,6',
'0,0,0,0,0,9,3,7',
'0,0,0,0,0,9,3,8',
'0,0,0,0,0,9,3,9',
'0,0,0,0,0,9,4,0',
'0,0,0,0,0,9,4,1',
'0,0,0,0,0,9,4,2',
'0,0,0,0,0,9,4,3',
'0,0,0,0,0,9,4,4',
'0,0,0,0,0,9,4,5',
'0,0,0,0,0,9,4,6',
'0,0,0,0,0,9,4,7',
'0,0,0,0,0,9,4,8',
'0,0,0,0,0,9,4,9',
'0,0,0,0,0,9,5,0',
'0,0,0,0,0,9,5,1',
'0,0,0,0,0,9,5,2',
'0,0,0,0,0,9,5,3',
'0,0,0,0,0,9,5,4',
'0,0,0,0,0,9,5,5',
'0,0,0,0,0,9,5,6',
'0,0,0,0,0,9,5,7',
'0,0,0,0,0,9,5,8',
'0,0,0,0,0,9,5,9',
'0,0,0,0,0,9,6,0',
'0,0,0,0,0,9,6,1',
'0,0,0,0,0,9,6,2',
'0,0,0,0,0,9,6,3',
'0,0,0,0,0,9,6,4',
'0,0,0,0,0,9,6,5',
'0,0,0,0,0,9,6,6',
'0,0,0,0,0,9,6,7',
'0,0,0,0,0,9,6,8',
'0,0,0,0,0,9,6,9',
'0,0,0,0,0,9,7,0',
'0,0,0,0,0,9,7,1',
'0,0,0,0,0,9,7,2',
'0,0,0,0,0,9,7,3',
'0,0,0,0,0,9,7,4',
'0,0,0,0,0,9,7,5',
'0,0,0,0,0,9,7,6',
'0,0,0,0,0,9,7,7',
'0,0,0,0,0,9,7,8',
'0,0,0,0,0,9,7,9',
'0,0,0,0,0,9,8,0',
'0,0,0,0,0,9,8,1',
'0,0,0,0,0,9,8,2',
'0,0,0,0,0,9,8,3',
'0,0,0,0,0,9,8,4',
'0,0,0,0,0,9,8,5',
'0,0,0,0,0,9,8,6',
'0,0,0,0,0,9,8,7',
'0,0,0,0,0,9,8,8',
'0,0,0,0,0,9,8,9',
'0,0,0,0,0,9,9,0',
'0,0,0,0,0,9,9,1',
'0,0,0,0,0,9,9,2',
'0,0,0,0,0,9,9,3',
'0,0,0,0,0,9,9,4',
'0,0,0,0,0,9,9,5',
'0,0,0,0,0,9,9,6',
'0,0,0,0,0,9,9,7',
'0,0,0,0,0,9,9,8',
'0,0,0,0,0,9,9,9',
'0,0,0,0,1,1,0,0',
'0,0,0,0,1,1,0,1',
'0,0,0,0,1,1,0,2',
'0,0,0,0,1,1,0,3',
'0,0,0,0,1,1,0,4',
'0,0,0,0,1,1,0,5',
'0,0,0,0,1,1,0,6',
'0,0,0,0,1,1,0,7',
'0,0,0,0,1,1,0,8',
'0,0,0,0,1,1,0,9',
'0,0,0,0,1,3,0,0',
'0,0,0,0,1,3,0,1',
'0,0,0,0,1,3,0,2',
'0,0,0,0,1,3,0,3',
'0,0,0,0,1,3,0,4',
'0,0,0,0,1,3,0,5',
'0,0,0,0,1,3,0,6',
'0,0,0,0,1,3,0,7',
'0,0,0,0,1,3,0,8',
'0,0,0,0,1,3,0,9',
'0,0,0,0,1,7,0,0',
'0,0,0,0,1,7,0,1',
'0,0,0,0,1,7,0,2',
'0,0,0,0,1,7,0,3',
'0,0,0,0,1,7,0,4',
'0,0,0,0,1,7,0,5',
'0,0,0,0,1,7,0,6',
'0,0,0,0,1,7,0,7',
'0,0,0,0,1,7,0,8',
'0,0,0,0,1,7,0,9',
'0,0,0,0,1,9,0,0',
'0,0,0,0,1,9,0,1',
'0,0,0,0,1,9,0,2',
'0,0,0,0,1,9,0,3',
'0,0,0,0,1,9,0,4',
'0,0,0,0,1,9,0,5',
'0,0,0,0,1,9,0,6',
'0,0,0,0,1,9,0,7',
'0,0,0,0,1,9,0,8',
'0,0,0,0,1,9,0,9',
'0,0,0,0,2,1,0,0',
'0,0,0,0,2,1,0,1',
'0,0,0,0,2,1,0,2',
'0,0,0,0,2,1,0,3',
'0,0,0,0,2,1,0,4',
'0,0,0,0,2,1,0,5',
'0,0,0,0,2,1,0,6',
'0,0,0,0,2,1,0,7',
'0,0,0,0,2,1,0,8',
'0,0,0,0,2,1,0,9',
'0,0,0,0,2,1,5,0',
'0,0,0,0,2,1,5,1',
'0,0,0,0,2,1,5,2',
'0,0,0,0,2,1,5,3',
'0,0,0,0,2,1,5,4',
'0,0,0,0,2,1,5,5',
'0,0,0,0,2,1,5,6',
'0,0,0,0,2,1,5,7',
'0,0,0,0,2,1,5,8',
'0,0,0,0,2,1,5,9',
'0,0,0,0,2,3,0,0',
'0,0,0,0,2,3,0,1',
'0,0,0,0,2,3,0,2',
'0,0,0,0,2,3,0,3',
'0,0,0,0,2,3,0,4',
'0,0,0,0,2,3,0,5',
'0,0,0,0,2,3,0,6',
'0,0,0,0,2,3,0,7',
'0,0,0,0,2,3,0,8',
'0,0,0,0,2,3,0,9',
'0,0,0,0,2,3,5,0',
'0,0,0,0,2,3,5,1',
'0,0,0,0,2,3,5,2',
'0,0,0,0,2,3,5,3',
'0,0,0,0,2,3,5,4',
'0,0,0,0,2,3,5,5',
'0,0,0,0,2,3,5,6',
'0,0,0,0,2,3,5,7',
'0,0,0,0,2,3,5,8',
'0,0,0,0,2,3,5,9',
'0,0,0,0,2,7,0,0',
'0,0,0,0,2,7,0,1',
'0,0,0,0,2,7,0,2',
'0,0,0,0,2,7,0,3',
'0,0,0,0,2,7,0,4',
'0,0,0,0,2,7,0,5',
'0,0,0,0,2,7,0,6',
'0,0,0,0,2,7,0,7',
'0,0,0,0,2,7,0,8',
'0,0,0,0,2,7,0,9',
'0,0,0,0,2,7,5,0',
'0,0,0,0,2,7,5,1',
'0,0,0,0,2,7,5,2',
'0,0,0,0,2,7,5,3',
'0,0,0,0,2,7,5,4',
'0,0,0,0,2,7,5,5',
'0,0,0,0,2,7,5,6',
'0,0,0,0,2,7,5,7',
'0,0,0,0,2,7,5,8',
'0,0,0,0,2,7,5,9',
'0,0,0,0,2,9,0,0',
'0,0,0,0,2,9,0,1',
'0,0,0,0,2,9,0,2',
'0,0,0,0,2,9,0,3',
'0,0,0,0,2,9,0,4',
'0,0,0,0,2,9,0,5',
'0,0,0,0,2,9,0,6',
'0,0,0,0,2,9,0,7',
'0,0,0,0,2,9,0,8',
'0,0,0,0,2,9,0,9',
'0,0,0,0,2,9,5,0',
'0,0,0,0,2,9,5,1',
'0,0,0,0,2,9,5,2',
'0,0,0,0,2,9,5,3',
'0,0,0,0,2,9,5,4',
'0,0,0,0,2,9,5,5',
'0,0,0,0,2,9,5,6',
'0,0,0,0,2,9,5,7',
'0,0,0,0,2,9,5,8',
'0,0,0,0,2,9,5,9',
'0,0,0,0,3,1,0,0',
'0,0,0,0,3,1,0,1',
'0,0,0,0,3,1,0,2',
'0,0,0,0,3,1,0,3',
'0,0,0,0,3,1,0,4',
'0,0,0,0,3,1,0,5',
'0,0,0,0,3,1,0,6',
'0,0,0,0,3,1,0,7',
'0,0,0,0,3,1,0,8',
'0,0,0,0,3,1,0,9',
'0,0,0,0,3,3,0,0',
'0,0,0,0,3,3,0,1',
'0,0,0,0,3,3,0,2',
'0,0,0,0,3,3,0,3',
'0,0,0,0,3,3,0,4',
'0,0,0,0,3,3,0,5',
'0,0,0,0,3,3,0,6',
'0,0,0,0,3,3,0,7',
'0,0,0,0,3,3,0,8',
'0,0,0,0,3,3,0,9',
'0,0,0,0,3,7,0,0',
'0,0,0,0,3,7,0,1',
'0,0,0,0,3,7,0,2',
'0,0,0,0,3,7,0,3',
'0,0,0,0,3,7,0,4',
'0,0,0,0,3,7,0,5',
'0,0,0,0,3,7,0,6',
'0,0,0,0,3,7,0,7',
'0,0,0,0,3,7,0,8',
'0,0,0,0,3,7,0,9',
'0,0,0,0,3,9,0,0',
'0,0,0,0,3,9,0,1',
'0,0,0,0,3,9,0,2',
'0,0,0,0,3,9,0,3',
'0,0,0,0,3,9,0,4',
'0,0,0,0,3,9,0,5',
'0,0,0,0,3,9,0,6',
'0,0,0,0,3,9,0,7',
'0,0,0,0,3,9,0,8',
'0,0,0,0,3,9,0,9',
'0,0,0,0,4,1,0,0',
'0,0,0,0,4,1,0,1',
'0,0,0,0,4,1,0,2',
'0,0,0,0,4,1,0,3',
'0,0,0,0,4,1,0,4',
'0,0,0,0,4,1,0,5',
'0,0,0,0,4,1,0,6',
'0,0,0,0,4,1,0,7',
'0,0,0,0,4,1,0,8',
'0,0,0,0,4,1,0,9',
'0,0,0,0,4,1,5,0',
'0,0,0,0,4,1,5,1',
'0,0,0,0,4,1,5,2',
'0,0,0,0,4,1,5,3',
'0,0,0,0,4,1,5,4',
'0,0,0,0,4,1,5,5',
'0,0,0,0,4,1,5,6',
'0,0,0,0,4,1,5,7',
'0,0,0,0,4,1,5,8',
'0,0,0,0,4,1,5,9',
'0,0,0,0,4,3,0,0',
'0,0,0,0,4,3,0,1',
'0,0,0,0,4,3,0,2',
'0,0,0,0,4,3,0,3',
'0,0,0,0,4,3,0,4',
'0,0,0,0,4,3,0,5',
'0,0,0,0,4,3,0,6',
'0,0,0,0,4,3,0,7',
'0,0,0,0,4,3,0,8',
'0,0,0,0,4,3,0,9',
'0,0,0,0,4,3,5,0',
'0,0,0,0,4,3,5,1',
'0,0,0,0,4,3,5,2',
'0,0,0,0,4,3,5,3',
'0,0,0,0,4,3,5,4',
'0,0,0,0,4,3,5,5',
'0,0,0,0,4,3,5,6',
'0,0,0,0,4,3,5,7',
'0,0,0,0,4,3,5,8',
'0,0,0,0,4,3,5,9',
'0,0,0,0,4,7,0,0',
'0,0,0,0,4,7,0,1',
'0,0,0,0,4,7,0,2',
'0,0,0,0,4,7,0,3',
'0,0,0,0,4,7,0,4',
'0,0,0,0,4,7,0,5',
'0,0,0,0,4,7,0,6',
'0,0,0,0,4,7,0,7',
'0,0,0,0,4,7,0,8',
'0,0,0,0,4,7,0,9',
'0,0,0,0,4,7,5,0',
'0,0,0,0,4,7,5,1',
'0,0,0,0,4,7,5,2',
'0,0,0,0,4,7,5,3',
'0,0,0,0,4,7,5,4',
'0,0,0,0,4,7,5,5',
'0,0,0,0,4,7,5,6',
'0,0,0,0,4,7,5,7',
'0,0,0,0,4,7,5,8',
'0,0,0,0,4,7,5,9',
'0,0,0,0,4,9,0,0',
'0,0,0,0,4,9,0,1',
'0,0,0,0,4,9,0,2',
'0,0,0,0,4,9,0,3',
'0,0,0,0,4,9,0,4',
'0,0,0,0,4,9,0,5',
'0,0,0,0,4,9,0,6',
'0,0,0,0,4,9,0,7',
'0,0,0,0,4,9,0,8',
'0,0,0,0,4,9,0,9',
'0,0,0,0,4,9,5,0',
'0,0,0,0,4,9,5,1',
'0,0,0,0,4,9,5,2',
'0,0,0,0,4,9,5,3',
'0,0,0,0,4,9,5,4',
'0,0,0,0,4,9,5,5',
'0,0,0,0,4,9,5,6',
'0,0,0,0,4,9,5,7',
'0,0,0,0,4,9,5,8',
'0,0,0,0,4,9,5,9',
'0,0,0,0,5,1,0,0',
'0,0,0,0,5,1,0,1',
'0,0,0,0,5,1,0,2',
'0,0,0,0,5,1,0,3',
'0,0,0,0,5,1,0,4',
'0,0,0,0,5,1,0,5',
'0,0,0,0,5,1,0,6',
'0,0,0,0,5,1,0,7',
'0,0,0,0,5,1,0,8',
'0,0,0,0,5,1,0,9',
'0,0,0,0,5,1,2,0',
'0,0,0,0,5,1,2,1',
'0,0,0,0,5,1,2,2',
'0,0,0,0,5,1,2,3',
'0,0,0,0,5,1,2,4',
'0,0,0,0,5,1,2,5',
'0,0,0,0,5,1,2,6',
'0,0,0,0,5,1,2,7',
'0,0,0,0,5,1,2,8',
'0,0,0,0,5,1,2,9',
'0,0,0,0,5,1,4,0',
'0,0,0,0,5,1,4,1',
'0,0,0,0,5,1,4,2',
'0,0,0,0,5,1,4,3',
'0,0,0,0,5,1,4,4',
'0,0,0,0,5,1,4,5',
'0,0,0,0,5,1,4,6',
'0,0,0,0,5,1,4,7',
'0,0,0,0,5,1,4,8',
'0,0,0,0,5,1,4,9',
'0,0,0,0,5,1,6,0',
'0,0,0,0,5,1,6,1',
'0,0,0,0,5,1,6,2',
'0,0,0,0,5,1,6,3',
'0,0,0,0,5,1,6,4',
'0,0,0,0,5,1,6,5',
'0,0,0,0,5,1,6,6',
'0,0,0,0,5,1,6,7',
'0,0,0,0,5,1,6,8',
'0,0,0,0,5,1,6,9',
'0,0,0,0,5,1,8,0',
'0,0,0,0,5,1,8,1',
'0,0,0,0,5,1,8,2',
'0,0,0,0,5,1,8,3',
'0,0,0,0,5,1,8,4',
'0,0,0,0,5,1,8,5',
'0,0,0,0,5,1,8,6',
'0,0,0,0,5,1,8,7',
'0,0,0,0,5,1,8,8',
'0,0,0,0,5,1,8,9',
'0,0,0,0,5,3,0,0',
'0,0,0,0,5,3,0,1',
'0,0,0,0,5,3,0,2',
'0,0,0,0,5,3,0,3',
'0,0,0,0,5,3,0,4',
'0,0,0,0,5,3,0,5',
'0,0,0,0,5,3,0,6',
'0,0,0,0,5,3,0,7',
'0,0,0,0,5,3,0,8',
'0,0,0,0,5,3,0,9',
'0,0,0,0,5,3,2,0',
'0,0,0,0,5,3,2,1',
'0,0,0,0,5,3,2,2',
'0,0,0,0,5,3,2,3',
'0,0,0,0,5,3,2,4',
'0,0,0,0,5,3,2,5',
'0,0,0,0,5,3,2,6',
'0,0,0,0,5,3,2,7',
'0,0,0,0,5,3,2,8',
'0,0,0,0,5,3,2,9',
'0,0,0,0,5,3,4,0',
'0,0,0,0,5,3,4,1',
'0,0,0,0,5,3,4,2',
'0,0,0,0,5,3,4,3',
'0,0,0,0,5,3,4,4',
'0,0,0,0,5,3,4,5',
'0,0,0,0,5,3,4,6',
'0,0,0,0,5,3,4,7',
'0,0,0,0,5,3,4,8',
'0,0,0,0,5,3,4,9',
'0,0,0,0,5,3,6,0',
'0,0,0,0,5,3,6,1',
'0,0,0,0,5,3,6,2',
'0,0,0,0,5,3,6,3',
'0,0,0,0,5,3,6,4',
'0,0,0,0,5,3,6,5',
'0,0,0,0,5,3,6,6',
'0,0,0,0,5,3,6,7',
'0,0,0,0,5,3,6,8',
'0,0,0,0,5,3,6,9',
'0,0,0,0,5,3,8,0',
'0,0,0,0,5,3,8,1',
'0,0,0,0,5,3,8,2',
'0,0,0,0,5,3,8,3',
'0,0,0,0,5,3,8,4',
'0,0,0,0,5,3,8,5',
'0,0,0,0,5,3,8,6',
'0,0,0,0,5,3,8,7',
'0,0,0,0,5,3,8,8',
'0,0,0,0,5,3,8,9',
'0,0,0,0,5,7,0,0',
'0,0,0,0,5,7,0,1',
'0,0,0,0,5,7,0,2',
'0,0,0,0,5,7,0,3',
'0,0,0,0,5,7,0,4',
'0,0,0,0,5,7,0,5',
'0,0,0,0,5,7,0,6',
'0,0,0,0,5,7,0,7',
'0,0,0,0,5,7,0,8',
'0,0,0,0,5,7,0,9',
'0,0,0,0,5,7,2,0',
'0,0,0,0,5,7,2,1',
'0,0,0,0,5,7,2,2',
'0,0,0,0,5,7,2,3',
'0,0,0,0,5,7,2,4',
'0,0,0,0,5,7,2,5',
'0,0,0,0,5,7,2,6',
'0,0,0,0,5,7,2,7',
'0,0,0,0,5,7,2,8',
'0,0,0,0,5,7,2,9',
'0,0,0,0,5,7,4,0',
'0,0,0,0,5,7,4,1',
'0,0,0,0,5,7,4,2',
'0,0,0,0,5,7,4,3',
'0,0,0,0,5,7,4,4',
'0,0,0,0,5,7,4,5',
'0,0,0,0,5,7,4,6',
'0,0,0,0,5,7,4,7',
'0,0,0,0,5,7,4,8',
'0,0,0,0,5,7,4,9',
'0,0,0,0,5,7,6,0',
'0,0,0,0,5,7,6,1',
'0,0,0,0,5,7,6,2',
'0,0,0,0,5,7,6,3',
'0,0,0,0,5,7,6,4',
'0,0,0,0,5,7,6,5',
'0,0,0,0,5,7,6,6',
'0,0,0,0,5,7,6,7',
'0,0,0,0,5,7,6,8',
'0,0,0,0,5,7,6,9',
'0,0,0,0,5,7,8,0',
'0,0,0,0,5,7,8,1',
'0,0,0,0,5,7,8,2',
'0,0,0,0,5,7,8,3',
'0,0,0,0,5,7,8,4',
'0,0,0,0,5,7,8,5',
'0,0,0,0,5,7,8,6',
'0,0,0,0,5,7,8,7',
'0,0,0,0,5,7,8,8',
'0,0,0,0,5,7,8,9',
'0,0,0,0,5,9,0,0',
'0,0,0,0,5,9,0,1',
'0,0,0,0,5,9,0,2',
'0,0,0,0,5,9,0,3',
'0,0,0,0,5,9,0,4',
'0,0,0,0,5,9,0,5',
'0,0,0,0,5,9,0,6',
'0,0,0,0,5,9,0,7',
'0,0,0,0,5,9,0,8',
'0,0,0,0,5,9,0,9',
'0,0,0,0,5,9,2,0',
'0,0,0,0,5,9,2,1',
'0,0,0,0,5,9,2,2',
'0,0,0,0,5,9,2,3',
'0,0,0,0,5,9,2,4',
'0,0,0,0,5,9,2,5',
'0,0,0,0,5,9,2,6',
'0,0,0,0,5,9,2,7',
'0,0,0,0,5,9,2,8',
'0,0,0,0,5,9,2,9',
'0,0,0,0,5,9,4,0',
'0,0,0,0,5,9,4,1',
'0,0,0,0,5,9,4,2',
'0,0,0,0,5,9,4,3',
'0,0,0,0,5,9,4,4',
'0,0,0,0,5,9,4,5',
'0,0,0,0,5,9,4,6',
'0,0,0,0,5,9,4,7',
'0,0,0,0,5,9,4,8',
'0,0,0,0,5,9,4,9',
'0,0,0,0,5,9,6,0',
'0,0,0,0,5,9,6,1',
'0,0,0,0,5,9,6,2',
'0,0,0,0,5,9,6,3',
'0,0,0,0,5,9,6,4',
'0,0,0,0,5,9,6,5',
'0,0,0,0,5,9,6,6',
'0,0,0,0,5,9,6,7',
'0,0,0,0,5,9,6,8',
'0,0,0,0,5,9,6,9',
'0,0,0,0,5,9,8,0',
'0,0,0,0,5,9,8,1',
'0,0,0,0,5,9,8,2',
'0,0,0,0,5,9,8,3',
'0,0,0,0,5,9,8,4',
'0,0,0,0,5,9,8,5',
'0,0,0,0,5,9,8,6',
'0,0,0,0,5,9,8,7',
'0,0,0,0,5,9,8,8',
'0,0,0,0,5,9,8,9',
'0,0,0,0,6,1,0,0',
'0,0,0,0,6,1,0,1',
'0,0,0,0,6,1,0,2',
'0,0,0,0,6,1,0,3',
'0,0,0,0,6,1,0,4',
'0,0,0,0,6,1,0,5',
'0,0,0,0,6,1,0,6',
'0,0,0,0,6,1,0,7',
'0,0,0,0,6,1,0,8',
'0,0,0,0,6,1,0,9',
'0,0,0,0,6,1,5,0',
'0,0,0,0,6,1,5,1',
'0,0,0,0,6,1,5,2',
'0,0,0,0,6,1,5,3',
'0,0,0,0,6,1,5,4',
'0,0,0,0,6,1,5,5',
'0,0,0,0,6,1,5,6',
'0,0,0,0,6,1,5,7',
'0,0,0,0,6,1,5,8',
'0,0,0,0,6,1,5,9',
'0,0,0,0,6,3,0,0',
'0,0,0,0,6,3,0,1',
'0,0,0,0,6,3,0,2',
'0,0,0,0,6,3,0,3',
'0,0,0,0,6,3,0,4',
'0,0,0,0,6,3,0,5',
'0,0,0,0,6,3,0,6',
'0,0,0,0,6,3,0,7',
'0,0,0,0,6,3,0,8',
'0,0,0,0,6,3,0,9',
'0,0,0,0,6,3,5,0',
'0,0,0,0,6,3,5,1',
'0,0,0,0,6,3,5,2',
'0,0,0,0,6,3,5,3',
'0,0,0,0,6,3,5,4',
'0,0,0,0,6,3,5,5',
'0,0,0,0,6,3,5,6',
'0,0,0,0,6,3,5,7',
'0,0,0,0,6,3,5,8',
'0,0,0,0,6,3,5,9',
'0,0,0,0,6,7,0,0',
'0,0,0,0,6,7,0,1',
'0,0,0,0,6,7,0,2',
'0,0,0,0,6,7,0,3',
'0,0,0,0,6,7,0,4',
'0,0,0,0,6,7,0,5',
'0,0,0,0,6,7,0,6',
'0,0,0,0,6,7,0,7',
'0,0,0,0,6,7,0,8',
'0,0,0,0,6,7,0,9',
'0,0,0,0,6,7,5,0',
'0,0,0,0,6,7,5,1',
'0,0,0,0,6,7,5,2',
'0,0,0,0,6,7,5,3',
'0,0,0,0,6,7,5,4',
'0,0,0,0,6,7,5,5',
'0,0,0,0,6,7,5,6',
'0,0,0,0,6,7,5,7',
'0,0,0,0,6,7,5,8',
'0,0,0,0,6,7,5,9',
'0,0,0,0,6,9,0,0',
'0,0,0,0,6,9,0,1',
'0,0,0,0,6,9,0,2',
'0,0,0,0,6,9,0,3',
'0,0,0,0,6,9,0,4',
'0,0,0,0,6,9,0,5',
'0,0,0,0,6,9,0,6',
'0,0,0,0,6,9,0,7',
'0,0,0,0,6,9,0,8',
'0,0,0,0,6,9,0,9',
'0,0,0,0,6,9,5,0',
'0,0,0,0,6,9,5,1',
'0,0,0,0,6,9,5,2',
'0,0,0,0,6,9,5,3',
'0,0,0,0,6,9,5,4',
'0,0,0,0,6,9,5,5',
'0,0,0,0,6,9,5,6',
'0,0,0,0,6,9,5,7',
'0,0,0,0,6,9,5,8',
'0,0,0,0,6,9,5,9',
'0,0,0,0,7,1,0,0',
'0,0,0,0,7,1,0,1',
'0,0,0,0,7,1,0,2',
'0,0,0,0,7,1,0,3',
'0,0,0,0,7,1,0,4',
'0,0,0,0,7,1,0,5',
'0,0,0,0,7,1,0,6',
'0,0,0,0,7,1,0,7',
'0,0,0,0,7,1,0,8',
'0,0,0,0,7,1,0,9',
'0,0,0,0,7,3,0,0',
'0,0,0,0,7,3,0,1',
'0,0,0,0,7,3,0,2',
'0,0,0,0,7,3,0,3',
'0,0,0,0,7,3,0,4',
'0,0,0,0,7,3,0,5',
'0,0,0,0,7,3,0,6',
'0,0,0,0,7,3,0,7',
'0,0,0,0,7,3,0,8',
'0,0,0,0,7,3,0,9',
'0,0,0,0,7,7,0,0',
'0,0,0,0,7,7,0,1',
'0,0,0,0,7,7,0,2',
'0,0,0,0,7,7,0,3',
'0,0,0,0,7,7,0,4',
'0,0,0,0,7,7,0,5',
'0,0,0,0,7,7,0,6',
'0,0,0,0,7,7,0,7',
'0,0,0,0,7,7,0,8',
'0,0,0,0,7,7,0,9',
'0,0,0,0,7,9,0,0',
'0,0,0,0,7,9,0,1',
'0,0,0,0,7,9,0,2',
'0,0,0,0,7,9,0,3',
'0,0,0,0,7,9,0,4',
'0,0,0,0,7,9,0,5',
'0,0,0,0,7,9,0,6',
'0,0,0,0,7,9,0,7',
'0,0,0,0,7,9,0,8',
'0,0,0,0,7,9,0,9',
'0,0,0,0,8,1,0,0',
'0,0,0,0,8,1,0,1',
'0,0,0,0,8,1,0,2',
'0,0,0,0,8,1,0,3',
'0,0,0,0,8,1,0,4',
'0,0,0,0,8,1,0,5',
'0,0,0,0,8,1,0,6',
'0,0,0,0,8,1,0,7',
'0,0,0,0,8,1,0,8',
'0,0,0,0,8,1,0,9',
'0,0,0,0,8,1,5,0',
'0,0,0,0,8,1,5,1',
'0,0,0,0,8,1,5,2',
'0,0,0,0,8,1,5,3',
'0,0,0,0,8,1,5,4',
'0,0,0,0,8,1,5,5',
'0,0,0,0,8,1,5,6',
'0,0,0,0,8,1,5,7',
'0,0,0,0,8,1,5,8',
'0,0,0,0,8,1,5,9',
'0,0,0,0,8,3,0,0',
'0,0,0,0,8,3,0,1',
'0,0,0,0,8,3,0,2',
'0,0,0,0,8,3,0,3',
'0,0,0,0,8,3,0,4',
'0,0,0,0,8,3,0,5',
'0,0,0,0,8,3,0,6',
'0,0,0,0,8,3,0,7',
'0,0,0,0,8,3,0,8',
'0,0,0,0,8,3,0,9',
'0,0,0,0,8,3,5,0',
'0,0,0,0,8,3,5,1',
'0,0,0,0,8,3,5,2',
'0,0,0,0,8,3,5,3',
'0,0,0,0,8,3,5,4',
'0,0,0,0,8,3,5,5',
'0,0,0,0,8,3,5,6',
'0,0,0,0,8,3,5,7',
'0,0,0,0,8,3,5,8',
'0,0,0,0,8,3,5,9',
'0,0,0,0,8,7,0,0',
'0,0,0,0,8,7,0,1',
'0,0,0,0,8,7,0,2',
'0,0,0,0,8,7,0,3',
'0,0,0,0,8,7,0,4',
'0,0,0,0,8,7,0,5',
'0,0,0,0,8,7,0,6',
'0,0,0,0,8,7,0,7',
'0,0,0,0,8,7,0,8',
'0,0,0,0,8,7,0,9',
'0,0,0,0,8,7,5,0',
'0,0,0,0,8,7,5,1',
'0,0,0,0,8,7,5,2',
'0,0,0,0,8,7,5,3',
'0,0,0,0,8,7,5,4',
'0,0,0,0,8,7,5,5',
'0,0,0,0,8,7,5,6',
'0,0,0,0,8,7,5,7',
'0,0,0,0,8,7,5,8',
'0,0,0,0,8,7,5,9',
'0,0,0,0,8,9,0,0',
'0,0,0,0,8,9,0,1',
'0,0,0,0,8,9,0,2',
'0,0,0,0,8,9,0,3',
'0,0,0,0,8,9,0,4',
'0,0,0,0,8,9,0,5',
'0,0,0,0,8,9,0,6',
'0,0,0,0,8,9,0,7',
'0,0,0,0,8,9,0,8',
'0,0,0,0,8,9,0,9',
'0,0,0,0,8,9,5,0',
'0,0,0,0,8,9,5,1',
'0,0,0,0,8,9,5,2',
'0,0,0,0,8,9,5,3',
'0,0,0,0,8,9,5,4',
'0,0,0,0,8,9,5,5',
'0,0,0,0,8,9,5,6',
'0,0,0,0,8,9,5,7',
'0,0,0,0,8,9,5,8',
'0,0,0,0,8,9,5,9',
'0,0,0,0,9,1,0,0',
'0,0,0,0,9,1,0,1',
'0,0,0,0,9,1,0,2',
'0,0,0,0,9,1,0,3',
'0,0,0,0,9,1,0,4',
'0,0,0,0,9,1,0,5',
'0,0,0,0,9,1,0,6',
'0,0,0,0,9,1,0,7',
'0,0,0,0,9,1,0,8',
'0,0,0,0,9,1,0,9',
'0,0,0,0,9,3,0,0',
'0,0,0,0,9,3,0,1',
'0,0,0,0,9,3,0,2',
'0,0,0,0,9,3,0,3',
'0,0,0,0,9,3,0,4',
'0,0,0,0,9,3,0,5',
'0,0,0,0,9,3,0,6',
'0,0,0,0,9,3,0,7',
'0,0,0,0,9,3,0,8',
'0,0,0,0,9,3,0,9',
'0,0,0,0,9,7,0,0',
'0,0,0,0,9,7,0,1',
'0,0,0,0,9,7,0,2',
'0,0,0,0,9,7,0,3',
'0,0,0,0,9,7,0,4',
'0,0,0,0,9,7,0,5',
'0,0,0,0,9,7,0,6',
'0,0,0,0,9,7,0,7',
'0,0,0,0,9,7,0,8',
'0,0,0,0,9,7,0,9',
'0,0,0,0,9,9,0,0',
'0,0,0,0,9,9,0,1',
'0,0,0,0,9,9,0,2',
'0,0,0,0,9,9,0,3',
'0,0,0,0,9,9,0,4',
'0,0,0,0,9,9,0,5',
'0,0,0,0,9,9,0,6',
'0,0,0,0,9,9,0,7',
'0,0,0,0,9,9,0,8',
'0,0,0,0,9,9,0,9']

"""#output"""

count=100
while(count):
  cellular_automata_clustering(rule_list,num_of_splits, split_enc,n)
  count=count-1